type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: PostOrderByInput): Feed!
}

enum PostOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  posts: [Post!]!
  count: Int!
}

type Mutation {
  post(title: String!, description: String!, content: String!, slug: String!, url: String! ): Post!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(postId: ID!): Vote
}

type Subscription {
  newPost: Post
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  description: String!
  content: String!
  slug: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  post: Post!
  user: User!
}
